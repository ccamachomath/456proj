import numpy as np
import matplotlib.pyplot as plt

# Original image and dimensions
image_path = r'C:\Users\cynna\OneDrive\Desktop\^Fall 2023^\MTH 456\cat.jpg'
image_array = plt.imread(image_path)
height, width, channels = image_array.shape

# Flatten the image array
flattened_image = image_array.reshape(-1, channels)

# Compute the mean of each feature (by pixel) and subtract it from the data
mean = np.mean(flattened_image, axis=0)
centered_data = flattened_image - mean

# Calculate covariance matrix, eigenvectors, and eigenvalues
covariance_matrix = np.cov(centered_data, rowvar=False)
eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)

# Sort eigenvectors based on eigenvalues in descending order
sorted_indices = np.argsort(eigenvalues)[::-1]
eigenvalues = eigenvalues[sorted_indices]
eigenvectors = eigenvectors[:, sorted_indices]

# Choose the number of principal components (eigenvectors) to use
num_components = 100  # Experiment with dimensions
selected_components = eigenvectors[:, :num_components]

# Project the data onto the selected principal components
reduced_data = np.dot(centered_data, selected_components)

# Reconstruct the image from reduced data
restored_data = np.dot(reduced_data, selected_components.T) + mean
restored_image = np.uint8(np.clip(restored_data, 0, 255).reshape(height, width, channels))

# Print covariance matrix, eigenvectors, eigenvalues, and projection matrix
print("Covariance Matrix:")
print(covariance_matrix)
print("\nEigenvalues:")
print(eigenvalues)
print("\nEigenvectors:")
print(eigenvectors)
print("\nProjection Matrix (Selected Components):")
print(selected_components)
print("\nPrincipal Components:")
print(selected_components.T @ centered_data.T)

# Display both the original and reduced images
plt.figure(figsize=(8, 4))

# Original image plot
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(image_array)
plt.axis('off')

# Reduced image plot
plt.subplot(1, 2, 2)
plt.title('Reduced Image (PCA: Min-Error)')
plt.imshow(restored_image)
plt.axis('off')
plt.tight_layout()
plt.show()
